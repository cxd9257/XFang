package com.demo.fang.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.demo.fang.bean.StockDataBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "STOCK_DATA_BEAN".
*/
public class StockDataBeanDao extends AbstractDao<StockDataBean, Long> {

    public static final String TABLENAME = "STOCK_DATA_BEAN";

    /**
     * Properties of entity StockDataBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Ids = new Property(0, Long.class, "ids", true, "_id");
        public final static Property Code = new Property(1, String.class, "code", false, "CODE");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property BuyPrice = new Property(3, String.class, "buyPrice", false, "BUY_PRICE");
        public final static Property NewPrice = new Property(4, String.class, "newPrice", false, "NEW_PRICE");
        public final static Property BuyMeasure = new Property(5, String.class, "buyMeasure", false, "BUY_MEASURE");
        public final static Property MarketValue = new Property(6, String.class, "marketValue", false, "MARKET_VALUE");
        public final static Property AllMarketValue = new Property(7, String.class, "allMarketValue", false, "ALL_MARKET_VALUE");
        public final static Property Date = new Property(8, java.util.Date.class, "date", false, "DATE");
    }


    public StockDataBeanDao(DaoConfig config) {
        super(config);
    }
    
    public StockDataBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"STOCK_DATA_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: ids
                "\"CODE\" TEXT," + // 1: code
                "\"NAME\" TEXT," + // 2: name
                "\"BUY_PRICE\" TEXT," + // 3: buyPrice
                "\"NEW_PRICE\" TEXT," + // 4: newPrice
                "\"BUY_MEASURE\" TEXT," + // 5: buyMeasure
                "\"MARKET_VALUE\" TEXT," + // 6: marketValue
                "\"ALL_MARKET_VALUE\" TEXT," + // 7: allMarketValue
                "\"DATE\" INTEGER);"); // 8: date
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"STOCK_DATA_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, StockDataBean entity) {
        stmt.clearBindings();
 
        Long ids = entity.getIds();
        if (ids != null) {
            stmt.bindLong(1, ids);
        }
 
        String code = entity.getCode();
        if (code != null) {
            stmt.bindString(2, code);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String buyPrice = entity.getBuyPrice();
        if (buyPrice != null) {
            stmt.bindString(4, buyPrice);
        }
 
        String newPrice = entity.getNewPrice();
        if (newPrice != null) {
            stmt.bindString(5, newPrice);
        }
 
        String buyMeasure = entity.getBuyMeasure();
        if (buyMeasure != null) {
            stmt.bindString(6, buyMeasure);
        }
 
        String marketValue = entity.getMarketValue();
        if (marketValue != null) {
            stmt.bindString(7, marketValue);
        }
 
        String allMarketValue = entity.getAllMarketValue();
        if (allMarketValue != null) {
            stmt.bindString(8, allMarketValue);
        }
 
        java.util.Date date = entity.getDate();
        if (date != null) {
            stmt.bindLong(9, date.getTime());
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, StockDataBean entity) {
        stmt.clearBindings();
 
        Long ids = entity.getIds();
        if (ids != null) {
            stmt.bindLong(1, ids);
        }
 
        String code = entity.getCode();
        if (code != null) {
            stmt.bindString(2, code);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String buyPrice = entity.getBuyPrice();
        if (buyPrice != null) {
            stmt.bindString(4, buyPrice);
        }
 
        String newPrice = entity.getNewPrice();
        if (newPrice != null) {
            stmt.bindString(5, newPrice);
        }
 
        String buyMeasure = entity.getBuyMeasure();
        if (buyMeasure != null) {
            stmt.bindString(6, buyMeasure);
        }
 
        String marketValue = entity.getMarketValue();
        if (marketValue != null) {
            stmt.bindString(7, marketValue);
        }
 
        String allMarketValue = entity.getAllMarketValue();
        if (allMarketValue != null) {
            stmt.bindString(8, allMarketValue);
        }
 
        java.util.Date date = entity.getDate();
        if (date != null) {
            stmt.bindLong(9, date.getTime());
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public StockDataBean readEntity(Cursor cursor, int offset) {
        StockDataBean entity = new StockDataBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // ids
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // code
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // buyPrice
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // newPrice
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // buyMeasure
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // marketValue
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // allMarketValue
            cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)) // date
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, StockDataBean entity, int offset) {
        entity.setIds(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCode(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setBuyPrice(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setNewPrice(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setBuyMeasure(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setMarketValue(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setAllMarketValue(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setDate(cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(StockDataBean entity, long rowId) {
        entity.setIds(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(StockDataBean entity) {
        if(entity != null) {
            return entity.getIds();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(StockDataBean entity) {
        return entity.getIds() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
